-->for merging two sorted arrays-:
-->time complexity in recursive call
int factorial(int n){
    if(n==0){     -->this takes constant k1
        return 1;
    }
    return n*factorial(n-1);-->multiplocation takes k2
}
*but total time=k1+k2+ti(n-1)-->ye function ne bhi to kuch kaam kiya hai
T(n)=T(n-1)+k
now solve this eqn
T(n)=T(n-1)+k
T(n-1)=T(n-2)+k
T(n-2)=T(n-3)+k
.
.
.
T(1)=k+T(0)
T(0)=k
----------------------
T(n)=k+k+k+k+...+k (n+1)times
T(n)=kn+k=O(n).
-->for binary search-:middle->k time+compare
                    -:t(n)=k+t(n-1)->yahi process baar baar repeat ho rha hai
                    t(n)=k+t(n/2)
                    t(n/2)=k+t(n/4)
                    . .
                    .
                    .
                    .
                    ..
                    =======================
                    t(n)=k+k+k....(n,n/2,....,1)-->jitne terms utni baar k add
                    1=n/2^x;x=logn
                    t(n)=klog(n)
-->fibonacci-:t(n)=t(n-1)+t(n-2)+k
now we know t(1)=t(0)=1
making an asummation-:t(n-1)=t(n-2);--->(imp)
t(n)=2t(n-2)+c
=2(2t(n-4))+c
=4(t(n-4))+c
=8(t(n-6))+c
=16(t(n-8))+c
=2^nt(n-2k)+(2^k-1)c
t(n)=2^n/2t(0)+(2^n/2-1)c
dominant term 2^n complexity

